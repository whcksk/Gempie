'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _googleplaces = require('./googleplaces');

var placesLib = _interopRequireWildcard(_googleplaces);

function processInput(apiKey, placesFunction, args) {
  if (args.length < 1 || args.length > 2) throw new SyntaxError('Not the right number of arguments');

  var query = args[0];

  if (typeof query !== 'object') throw new SyntaxError('Input is incorrect, must be JSON');

  // add the API key to the query; every query needs one
  query.key = apiKey;

  // promise call
  if (args.length === 1) {
    if (typeof Promise !== 'undefined') {
      return new Promise(function (resolve, reject) {
        placesFunction(query, function (err, res) {
          if (err) return reject(err);

          resolve(res);
        });
      });
    } else throw new SyntaxError('Promises are not available for this call');
  } else {
    // regular callback
    var cb = args[1];

    if (typeof cb !== 'function') throw new SyntaxError('No callback present');

    placesFunction(query, cb);
  }
}

var GooglePlaces = (function () {
  function GooglePlaces(apiKey) {
    _classCallCheck(this, GooglePlaces);

    this.apiKey = apiKey;
  }

  _createClass(GooglePlaces, [{
    key: 'nearbySearch',
    value: function nearbySearch(query, cb) {
      return processInput(this.apiKey, placesLib.nearbySearch, arguments);
    }
  }, {
    key: 'textSearch',
    value: function textSearch(queryObj, cb) {
      return processInput(this.apiKey, placesLib.textSearch, arguments);
    }
  }, {
    key: 'radarSearch',
    value: function radarSearch(queryObj, cb) {
      return processInput(this.apiKey, placesLib.radarSearch, arguments);
    }
  }, {
    key: 'details',
    value: function details(queryObj, cb) {
      return processInput(this.apiKey, placesLib.details, arguments);
    }
  }, {
    key: 'add',
    value: function add(sendObj, cb) {
      return processInput(this.apiKey, placesLib.addPlace, arguments);
    }
  }, {
    key: 'delete',
    value: function _delete(sendObj, cb) {
      return processInput(this.apiKey, placesLib.deletePlace, arguments);
    }
  }, {
    key: 'photo',
    value: function photo(queryObj, cb) {
      return processInput(this.apiKey, placesLib.photo, arguments);
    }
  }, {
    key: 'autocomplete',
    value: function autocomplete(queryObj, cb) {
      return processInput(this.apiKey, placesLib.autocomplete, arguments);
    }
  }, {
    key: 'queryAutocomplete',
    value: function queryAutocomplete(queryObj, cb) {
      return processInput(this.apiKey, placesLib.queryAutocomplete, arguments);
    }
  }]);

  return GooglePlaces;
})();

exports['default'] = GooglePlaces;
module.exports = exports['default'];