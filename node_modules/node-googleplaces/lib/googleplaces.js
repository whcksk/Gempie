'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.nearbySearch = nearbySearch;
exports.textSearch = textSearch;
exports.radarSearch = radarSearch;
exports.details = details;
exports.addPlace = addPlace;
exports.deletePlace = deletePlace;
exports.photo = photo;
exports.autocomplete = autocomplete;
exports.queryAutocomplete = queryAutocomplete;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _superagent = require('superagent');

var _superagent2 = _interopRequireDefault(_superagent);

var NEARBY_SEARCH = 'nearbysearch';
var TEXT_SEARCH = 'textsearch';
var RADAR_SEARCH = 'radarsearch';
var DETAILS = 'details';
var ADD = 'add';
var DELETE = 'delete';
var PHOTO = 'photo';
var AUTOCOMPLETE = 'autocomplete';
var QUERY_AUTOCOMPLETE = 'queryautocomplete';

var JSON = '/json';
var NOTHING = '';

function getFormattedHttpUrl(type, format) {
  var coreUrl = 'https://maps.googleapis.com/maps/api/place/';

  return coreUrl + type + format;
}

function getCall(type, queryObj, format, cb) {
  var url = getFormattedHttpUrl(type, format);

  _superagent2['default'].get(url).query(queryObj).end(cb);
}

function postCall(type, sendObj, cb) {
  var url = getFormattedHttpUrl(type, JSON);
  var key = sendObj.key;

  delete sendObj.key;

  _superagent2['default'].post(url).query({ key: key }).send(sendObj).end(cb);
}

function nearbySearch(queryObj, cb) {
  getCall(NEARBY_SEARCH, queryObj, JSON, cb);
}

function textSearch(queryObj, cb) {
  getCall(TEXT_SEARCH, queryObj, JSON, cb);
}

function radarSearch(queryObj, cb) {
  getCall(RADAR_SEARCH, queryObj, JSON, cb);
}

function details(queryObj, cb) {
  getCall(DETAILS, queryObj, JSON, cb);
}

function addPlace(sendObj, cb) {
  postCall(ADD, sendObj, cb);
}

function deletePlace(sendObj, cb) {
  postCall(DELETE, sendObj, cb);
}

function photo(queryObj, cb) {
  getCall(PHOTO, queryObj, NOTHING, cb);
}

function autocomplete(queryObj, cb) {
  getCall(AUTOCOMPLETE, queryObj, JSON, cb);
}

function queryAutocomplete(queryObj, cb) {
  getCall(QUERY_AUTOCOMPLETE, queryObj, JSON, cb);
}